// Generated by CoffeeScript 1.8.0
var $, dQuery;

dQuery = (function() {
  function dQuery(selector) {
    var me;
    me = this;
    if (selector instanceof HTMLDocument) {
      if (typeof selector.dataset === 'undefined') {
        selector.dataset = {};
      }
      if (typeof selector.dataset.uid === 'undefined') {
        selector.dataset.uid = $.rand();
        $.each(this.events, function(event) {
          var deEvent;
          deEvent = event;
          selector.addEventListener(deEvent, function(e) {
            e.stopImmediatePropagation();
            me.trigger(deEvent, e);
          });
        });
      }
      this.elements = [selector];
    } else if (selector instanceof HTMLElement) {
      if (typeof selector.dataset.uid === 'undefined') {
        selector.dataset.uid = $.rand();
      }
      this.elements = [selector];
    } else if (typeof selector === 'string') {
      this.elements = document.querySelectorAll(selector);
    } else if (typeof selector === 'object') {
      this.elements = selector;
      this.each(function(el) {
        return el.dataset.uid = $.rand();
      });
    } else {
      this.elements = [];
    }
    this.length = this.elements.length;
    $.each(this.events, function(event) {
      me.each(function(obj) {
        var deEvent;
        deEvent = event;
        obj.addEventListener(deEvent, function(e) {
          me.trigger(deEvent, e);
        });
      });
    });
  }

  dQuery.prototype.events = ['click', 'keydown', 'keyup', 'submit', 'keypress'];

  dQuery.prototype.entities = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  dQuery.prototype.ready = function(cb) {
    this.each(function(val) {
      if (val instanceof HTMLDocument) {
        if (val.readyState === "complete") {
          cb();
        } else {
          val.addEventListener('DOMContentLoaded', cb, false);
        }
      } else if (val instanceof HTMLImageElement) {
        if (val.complete) {
          cb();
        } else {
          val.onload = cb;
        }
      }
    });
  };

  dQuery.prototype.on = function(name, cb) {
    name = name.split('.');
    if (typeof name[1] === 'undefined') {
      name[1] = $.rand();
    }
    this.each(function(el) {
      if (typeof $.triggers[el.dataset.uid] === 'undefined') {
        $.triggers[el.dataset.uid] = {};
      }
      if (typeof $.triggers[el.dataset.uid][name[0]] === 'undefined') {
        $.triggers[el.dataset.uid][name[0]] = {};
      }
      return $.triggers[el.dataset.uid][name[0]][name[1]] = cb;
    });
    return this;
  };

  dQuery.prototype.off = function(name) {
    name = name.split('.');
    if (typeof name[1] === 'undefined') {
      this.each(function(el) {
        if (typeof $.triggers[el.dataset.uid] !== 'undefined') {
          return delete $.triggers[el.dataset.uid][name[0]];
        }
      });
    } else {
      this.each(function(el) {
        if ((typeof $.triggers[el.dataset.uid] !== 'undefined') && (typeof $.triggers[el.dataset.uid][name[0]] !== 'undefined')) {
          return delete $.triggers[el.dataset.uid][name[0]][name[1]];
        }
      });
    }
    return this;
  };

  dQuery.prototype.trigger = function(name, args) {
    this.each(function(el) {
      var callback, i, _ref;
      if ((typeof $.triggers[el.dataset.uid] !== 'undefined') && (typeof $.triggers[el.dataset.uid][name] !== 'undefined')) {
        _ref = $.triggers[el.dataset.uid][name];
        for (i in _ref) {
          callback = _ref[i];
          callback(args);
        }
      }
      return this;
    });
    return this;
  };

  dQuery.prototype.attr = function(name, value) {
    if (typeof value === void 0) {
      if (this.length === 0) {
        return '';
      }
      return this.elements[0].getAttribute(name);
    } else {
      if (this.length === 0) {
        return;
      }
      this.each(function(el) {
        return el.setAttribute(name, value);
      });
    }
    return this;
  };

  dQuery.prototype.parent = function(selector) {
    var el, firstChar, parents;
    if (this.length === 0) {
      return new dQuery;
    }
    if (typeof selector === 'undefined') {
      selector = null;
    } else {
      firstChar = selector.charAt(0);
      if (firstChar === '.' || firstChar === '#' || firstChar === '[') {
        selector = selector.substr(1);
      } else {
        firstChar = null;
      }
    }
    el = this.elements[0];
    parents = [];
    while ((el = el.parentNode) && el !== document) {
      if (selector === null) {
        parents.push(el);
      } else {
        if (firstChar === null) {
          if (firstChar === '.' && el.classList.contains(selector)) {
            parents.push(el);
          } else if (firstChar === '#' && el.id === selector) {
            parents.push(el);
          } else if (firstChar === '[' && el.hasAttribute(selector.substr(0, selector.length - 1))) {
            parents.push(el);
          }
        } else {

        }
        if (el.tagName.toLowerCase() === selector) {
          parents.push(el);
        }
      }
    }
    return new dQuery(parents);
  };

  dQuery.prototype.closest = function(selector) {
    var el, firstChar;
    if (this.length === 0) {
      return new dQuery;
    }
    if (typeof selector === 'undefined') {
      selector = null;
    } else {
      firstChar = selector.charAt(0);
      if (firstChar === '.' || firstChar === '#' || firstChar === '[') {
        selector = selector.substr(1);
      } else {
        firstChar = null;
      }
    }
    el = this.elements[0];
    while ((el = el.parentNode) && el !== document) {
      if (selector === null) {
        return new dQuery([el]);
      } else {
        if (firstChar === null) {
          if (firstChar === '.' && el.classList.contains(selector)) {
            return new dQuery([el]);
          } else if (firstChar === '#' && el.id === selector) {
            return new dQuery([el]);
          } else if (firstChar === '[' && el.hasAttribute(selector.substr(0, selector.length - 1))) {
            return new dQuery([el]);
          }
        } else {

        }
        if (el.tagName.toLowerCase() === selector) {
          return new dQuery([el]);
        }
      }
    }
    return new dQuery;
  };

  dQuery.prototype.find = function(selector) {
    if (this.length === 0) {
      return new dQuery();
    }
    return new dQuery(this.elements[0].querySelectorAll(selector));
  };

  dQuery.prototype.removeAttr = function(name) {
    if (this.length === 0) {
      return false;
    }
    this.each(function(el) {
      el.removeAttribute(name);
    });
    return this;
  };

  dQuery.prototype.hasClass = function(name) {
    if (this.length === 0) {
      return false;
    }
    return this.elements[0].classList.contains(name);
  };

  dQuery.prototype.addClass = function(name) {
    if (this.length === 0) {
      return false;
    }
    this.each(function(el) {
      el.classList.add(name);
    });
    return this;
  };

  dQuery.prototype.removeClass = function(name) {
    if (this.length === 0) {
      return false;
    }
    this.each(function(el) {
      el.classList.remove(name);
    });
    return this;
  };

  dQuery.prototype.toggleClass = function(name) {
    if (this.length === 0) {
      return false;
    }
    this.each(function(el) {
      el.classList.toggle(name);
    });
    return this;
  };

  dQuery.prototype.each = function(cb) {
    if (this.length === 0) {
      return false;
    }
    $.each(this.elements, cb);
    return this;
  };

  dQuery.prototype.html = function(text) {
    if (this.length === 0) {
      return false;
    }
    if (typeof text === 'undefined') {
      return this.elements[0].innerHTML;
    }
    this.each(function(el) {
      el.innerHTML = text;
    });
    return this;
  };

  dQuery.prototype.text = function(text) {
    var escaped, me;
    me = this;
    if (this.length === 0) {
      return false;
    }
    if (typeof text === 'undefined') {
      return this.elements[0].innerHTML.replace(/[&<>"'\/]/g, function(s) {
        return me.entities[s];
      });
    } else {
      escaped = text.replace(/[&<>"'\/]/g, function(s) {
        return me.entities[s];
      });
      this.each(function(el) {
        el.innerHTML = escaped;
      });
    }
    return this;
  };

  dQuery.prototype.replaceWith = function(obj) {
    if (!(obj instanceof dQuery) || obj.length < 1 || this.length < 1) {
      return false;
    }
    this.elements[0].parentNode.replaceChild(obj.elements[0], this.elements[0]);
    return new dQuery([obj.elements[0]]);
  };

  dQuery.prototype.prepend = function(obj) {
    if (!(obj instanceof dQuery) || obj.length < 1 || this.length < 1) {
      return false;
    }
    return new dQuery([this.elements[0].insertBefore(obj.elements[0], this.elements[0].firstChild)]);
  };

  dQuery.prototype.append = function(obj) {
    if (!(obj instanceof dQuery) || obj.length < 1 || this.length < 1) {
      return false;
    }
    return new dQuery([this.elements[0].appendChild(obj.elements[0])]);
  };

  dQuery.prototype.first = function() {
    if (this.length === 0) {
      return false;
    }
    return new dQuery([this.elements[0]]);
  };

  dQuery.prototype.last = function() {
    if (this.length === 0) {
      return false;
    }
    return new dQuery([this.elements[this.length - 1]]);
  };

  dQuery.prototype.val = function(val) {
    if (this.length === 0) {
      return false;
    }
    if (typeof val === 'undefined') {
      this.elements[0].value = val;
    } else {
      return this.elements[0].value;
    }
  };

  dQuery.prototype.appendTo = function(obj) {
    if (!(obj instanceof dQuery) || obj.length < 1 || this.length < 1) {
      return false;
    }
    obj.elements[0].appendChild(this.elements[0]);
    return this;
  };

  dQuery.prototype.prependTo = function(obj) {
    if (!(obj instanceof dQuery) || obj.length < 1 || this.length < 1) {
      return false;
    }
    obj.elements[0].insertBefore(this.elements[0], obj.elements[0].firstChild);
    return this;
  };

  return dQuery;

})();

$ = function(selector) {
  return new dQuery(selector);
};

$.rand = function() {
  return (Math.random() + 1).toString(36).substring(7);
};

$.extend = function(a, b) {
  var key, _i, _len;
  for (_i = 0, _len = b.length; _i < _len; _i++) {
    key = b[_i];
    if (b.hasOwnProperty(key)) {
      a[key] = b[key];
    }
  }
  return a;
};

$.triggers = {};

$.each = function(obj, cb) {
  var i, val;
  if (obj instanceof Array || obj instanceof NodeList) {
    [].forEach.call(obj, cb);
  } else if (typeof obj.length !== 'undefined') {
    i = 0;
    while (i < obj.length && typeof obj[i] !== 'undefined') {
      cb(obj[i], i, obj);
      ++i;
    }
  } else {
    for (i in obj) {
      val = obj[i];
      if (obj.hasOwnProperty(i)) {
        cb(val, i, obj);
      }
    }
  }
};
